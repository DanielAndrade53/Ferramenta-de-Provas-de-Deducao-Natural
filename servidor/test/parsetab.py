
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW COMMA CONJ DISJ EBinOp EUnOp EVar ID LPAREN NOT RPARENProgram : ExpressionListExpressionList : ExpressionExpression : IDExpression : UnaryOp IDExpression : Expression BinaryOp ExpressionExpression : UnaryOp LPAREN Expression RPARENExpression : LPAREN Expression RPARENProgram : EExpressionListEExpressionList : EExpressionEExpressionList : EExpression EExpressionListEExpression : EVar LPAREN ID RPARENEExpression : EBinOp LPAREN BinaryOp COMMA EExpression COMMA EExpression RPARENEExpression : EUnOp LPAREN UnaryOp COMMA EExpression RPARENBinaryOp : ARROWBinaryOp : CONJBinaryOp : DISJUnaryOp : NOT'
    
_lr_action_items = {'ID':([0,7,8,12,13,14,15,16,19,21,],[6,18,6,-17,6,-14,-15,-16,6,27,]),'LPAREN':([0,7,8,9,10,11,12,13,14,15,16,19,],[8,19,8,21,22,23,-17,8,-14,-15,-16,8,]),'EVar':([0,5,31,32,33,36,37,39,],[9,9,-11,9,9,9,-13,-12,]),'EBinOp':([0,5,31,32,33,36,37,39,],[10,10,-11,10,10,10,-13,-12,]),'EUnOp':([0,5,31,32,33,36,37,39,],[11,11,-11,11,11,11,-13,-12,]),'NOT':([0,8,13,14,15,16,19,23,],[12,12,12,-14,-15,-16,12,12,]),'$end':([1,2,3,4,5,6,17,18,24,26,30,31,37,39,],[0,-1,-8,-2,-9,-3,-10,-4,-5,-7,-6,-11,-13,-12,]),'ARROW':([4,6,18,20,22,24,25,26,30,],[14,-3,-4,14,14,14,14,-7,-6,]),'CONJ':([4,6,18,20,22,24,25,26,30,],[15,-3,-4,15,15,15,15,-7,-6,]),'DISJ':([4,6,18,20,22,24,25,26,30,],[16,-3,-4,16,16,16,16,-7,-6,]),'RPAREN':([6,18,20,24,25,26,27,30,31,35,37,38,39,],[-3,-4,26,-5,30,-7,31,-6,-11,37,-13,39,-12,]),'COMMA':([12,14,15,16,28,29,31,34,37,39,],[-17,-14,-15,-16,32,33,-11,36,-13,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'ExpressionList':([0,],[2,]),'EExpressionList':([0,5,],[3,17,]),'Expression':([0,8,13,19,],[4,20,24,25,]),'EExpression':([0,5,32,33,36,],[5,5,34,35,38,]),'UnaryOp':([0,8,13,19,23,],[7,7,7,7,29,]),'BinaryOp':([4,20,22,24,25,],[13,13,28,13,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> ExpressionList','Program',1,'p_Program_1','grammar.py',45),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList_1','grammar.py',49),
  ('Expression -> ID','Expression',1,'p_Expression_1','grammar.py',53),
  ('Expression -> UnaryOp ID','Expression',2,'p_Expression_2','grammar.py',57),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_Expression_3','grammar.py',61),
  ('Expression -> UnaryOp LPAREN Expression RPAREN','Expression',4,'p_Expression_4','grammar.py',65),
  ('Expression -> LPAREN Expression RPAREN','Expression',3,'p_Expression_5','grammar.py',69),
  ('Program -> EExpressionList','Program',1,'p_Program_2','grammar.py',73),
  ('EExpressionList -> EExpression','EExpressionList',1,'p_EExpressionList_1','grammar.py',77),
  ('EExpressionList -> EExpression EExpressionList','EExpressionList',2,'p_EExpressionList_2','grammar.py',81),
  ('EExpression -> EVar LPAREN ID RPAREN','EExpression',4,'p_EVar','grammar.py',85),
  ('EExpression -> EBinOp LPAREN BinaryOp COMMA EExpression COMMA EExpression RPAREN','EExpression',8,'p_EBinOp','grammar.py',89),
  ('EExpression -> EUnOp LPAREN UnaryOp COMMA EExpression RPAREN','EExpression',6,'p_EUnOp','grammar.py',93),
  ('BinaryOp -> ARROW','BinaryOp',1,'p_BinaryOp_1','grammar.py',97),
  ('BinaryOp -> CONJ','BinaryOp',1,'p_BinaryOp_2','grammar.py',101),
  ('BinaryOp -> DISJ','BinaryOp',1,'p_BinaryOp_3','grammar.py',105),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnariOp','grammar.py',109),
]
