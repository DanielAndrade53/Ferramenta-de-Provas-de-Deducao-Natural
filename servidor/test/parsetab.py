
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW COMMA CONJ DISJ EBinOp EUnOp EVar ID LPAREN NOT RPARENProgram : ExpressionListExpressionList : ExpressionExpressionList : Expression ExpressionListExpression : IDExpression : UnaryOp IDExpression : Expression BinaryOp ExpressionExpression : UnaryOp LPAREN Expression RPARENExpression : LPAREN Expression RPARENProgram : EExpressionListEExpressionList : EExpressionEExpressionList : EExpression EExpressionListEExpression : EVar LPAREN ID RPARENEExpression : EBinOp LPAREN BinaryOp COMMA EExpression COMMA EExpression RPARENEExpression : EUnOp LPAREN UnaryOp COMMA EExpression RPARENBinaryOp : ARROWBinaryOp : CONJBinaryOp : DISJUnaryOp : NOT'
    
_lr_action_items = {'ID':([0,4,6,7,8,12,14,15,16,17,19,20,22,25,27,31,],[6,6,-4,19,6,-18,6,-15,-16,-17,-5,6,28,-6,-8,-7,]),'LPAREN':([0,4,6,7,8,9,10,11,12,14,15,16,17,19,20,25,27,31,],[8,8,-4,20,8,22,23,24,-18,8,-15,-16,-17,-5,8,-6,-8,-7,]),'EVar':([0,5,32,33,34,37,38,40,],[9,9,-12,9,9,9,-14,-13,]),'EBinOp':([0,5,32,33,34,37,38,40,],[10,10,-12,10,10,10,-14,-13,]),'EUnOp':([0,5,32,33,34,37,38,40,],[11,11,-12,11,11,11,-14,-13,]),'NOT':([0,4,6,8,14,15,16,17,19,20,24,25,27,31,],[12,12,-4,12,12,-15,-16,-17,-5,12,12,-6,-8,-7,]),'$end':([1,2,3,4,5,6,13,18,19,25,27,31,32,38,40,],[0,-1,-9,-2,-10,-4,-3,-11,-5,-6,-8,-7,-12,-14,-13,]),'ARROW':([4,6,19,21,23,25,26,27,31,],[15,-4,-5,15,15,15,15,-8,-7,]),'CONJ':([4,6,19,21,23,25,26,27,31,],[16,-4,-5,16,16,16,16,-8,-7,]),'DISJ':([4,6,19,21,23,25,26,27,31,],[17,-4,-5,17,17,17,17,-8,-7,]),'RPAREN':([6,19,21,25,26,27,28,31,32,36,38,39,40,],[-4,-5,27,-6,31,-8,32,-7,-12,38,-14,40,-13,]),'COMMA':([12,15,16,17,29,30,32,35,38,40,],[-18,-15,-16,-17,33,34,-12,37,-14,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'ExpressionList':([0,4,],[2,13,]),'EExpressionList':([0,5,],[3,18,]),'Expression':([0,4,8,14,20,],[4,4,21,25,26,]),'EExpression':([0,5,33,34,37,],[5,5,35,36,39,]),'UnaryOp':([0,4,8,14,20,24,],[7,7,7,7,7,30,]),'BinaryOp':([4,21,23,25,26,],[14,14,29,14,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> ExpressionList','Program',1,'p_Program_1','grammar.py',46),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList_1','grammar.py',50),
  ('ExpressionList -> Expression ExpressionList','ExpressionList',2,'p_ExpressionList_2','grammar.py',54),
  ('Expression -> ID','Expression',1,'p_Expression_1','grammar.py',58),
  ('Expression -> UnaryOp ID','Expression',2,'p_Expression_2','grammar.py',62),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_Expression_3','grammar.py',66),
  ('Expression -> UnaryOp LPAREN Expression RPAREN','Expression',4,'p_Expression_4','grammar.py',70),
  ('Expression -> LPAREN Expression RPAREN','Expression',3,'p_Expression_5','grammar.py',74),
  ('Program -> EExpressionList','Program',1,'p_Program_2','grammar.py',78),
  ('EExpressionList -> EExpression','EExpressionList',1,'p_EExpressionList_1','grammar.py',82),
  ('EExpressionList -> EExpression EExpressionList','EExpressionList',2,'p_EExpressionList_2','grammar.py',86),
  ('EExpression -> EVar LPAREN ID RPAREN','EExpression',4,'p_EVar','grammar.py',90),
  ('EExpression -> EBinOp LPAREN BinaryOp COMMA EExpression COMMA EExpression RPAREN','EExpression',8,'p_EBinOp','grammar.py',94),
  ('EExpression -> EUnOp LPAREN UnaryOp COMMA EExpression RPAREN','EExpression',6,'p_EUnOp','grammar.py',98),
  ('BinaryOp -> ARROW','BinaryOp',1,'p_BinaryOp_1','grammar.py',102),
  ('BinaryOp -> CONJ','BinaryOp',1,'p_BinaryOp_2','grammar.py',106),
  ('BinaryOp -> DISJ','BinaryOp',1,'p_BinaryOp_3','grammar.py',110),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnariOp','grammar.py',114),
]
