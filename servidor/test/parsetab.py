
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW CONJ DISJ ID LPAREN NOT RPARENProgram : ExpressionListExpressionList : ExpressionExpressionList : Expression ExpressionListExpression : IDExpression : Expression BinaryOp ExpressionExpression : UnaryOp ExpressionExpression : LPAREN Expression RPARENBinaryOp : ARROWBinaryOp : CONJBinaryOp : DISJUnaryOp : NOT'
    
_lr_action_items = {'ID':([0,3,4,5,6,7,9,10,11,12,13,15,16,],[4,4,-4,4,4,-11,4,-8,-9,-10,-6,-5,-7,]),'LPAREN':([0,3,4,5,6,7,9,10,11,12,13,15,16,],[6,6,-4,6,6,-11,6,-8,-9,-10,-6,-5,-7,]),'NOT':([0,3,4,5,6,7,9,10,11,12,13,15,16,],[7,7,-4,7,7,-11,7,-8,-9,-10,-6,-5,-7,]),'$end':([1,2,3,4,8,13,15,16,],[0,-1,-2,-4,-3,-6,-5,-7,]),'ARROW':([3,4,13,14,15,16,],[10,-4,10,10,10,-7,]),'CONJ':([3,4,13,14,15,16,],[11,-4,11,11,11,-7,]),'DISJ':([3,4,13,14,15,16,],[12,-4,12,12,12,-7,]),'RPAREN':([4,13,14,15,16,],[-4,-6,16,-5,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'ExpressionList':([0,3,],[2,8,]),'Expression':([0,3,5,6,9,],[3,3,13,14,15,]),'UnaryOp':([0,3,5,6,9,],[5,5,5,5,5,]),'BinaryOp':([3,13,14,15,],[9,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> ExpressionList','Program',1,'p_Program','grammar.py',42),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList_1','grammar.py',46),
  ('ExpressionList -> Expression ExpressionList','ExpressionList',2,'p_ExpressionList','grammar.py',50),
  ('Expression -> ID','Expression',1,'p_Expression_1','grammar.py',54),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_Expression_2','grammar.py',58),
  ('Expression -> UnaryOp Expression','Expression',2,'p_Expression_3','grammar.py',62),
  ('Expression -> LPAREN Expression RPAREN','Expression',3,'p_Expression_4','grammar.py',66),
  ('BinaryOp -> ARROW','BinaryOp',1,'p_BinaryOp_1','grammar.py',70),
  ('BinaryOp -> CONJ','BinaryOp',1,'p_BinaryOp_2','grammar.py',74),
  ('BinaryOp -> DISJ','BinaryOp',1,'p_BinaryOp_3','grammar.py',78),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnariOp','grammar.py',82),
]
